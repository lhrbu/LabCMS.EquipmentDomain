@page "/Fixtures"

<Collapse Accordion>
    <Panel Header="Input Query" Key="Panel1">
        <Form Model="_query"
              LabelCol="new ColLayoutParam { Span = 8 }"
              WrapperCol="new ColLayoutParam { Span = 12 }"
              OnFinish="SubmitQuery">
            <FormItem Label="No">
                <Input @bind-Value="@context.No" />
            </FormItem>
            <FormItem Label="Project No">
                <Input @bind-Value="@context.ProjectNo" />
            </FormItem>
            <FormItem Label="Project Name">
                <Input @bind-Value="@context.ProjectName" />
            </FormItem>
            <FormItem Label="Type">
                <RadioGroup @bind-Value="QueryTypeString">
                    @foreach (string enumName in typeof(FixtureType).GetEnumNames())
                    {
                        <Radio RadioButton Value="enumName">@enumName</Radio>
                    }
                </RadioGroup>
            </FormItem>
            <br />
            <FormItem WrapperCol="new ColLayoutParam{ Offset = 8, Span = 12 }">
                <Button Type="@ButtonType.Primary" HtmlType="submit">
                    Submit
                </Button>
            </FormItem>
        </Form>
    </Panel>
    <Panel Header="Dynamic Query" Key="Panel2">
        <TextArea Type="secondary" @bind-Value="_dynamicCode" MinRows="5">
        </TextArea>
    </Panel>
</Collapse>

<br />

<Table DataSource="_renderedFixtures"
       @bind-PageSize="_pageSize"
       Bordered="true"
       Size="TableSize.Small">

    <Column @bind-Field="@context.ProjectNo" Sortable="true" />
    <Column @bind-Field="@context.Type" Sortable="true" />
    <Column @bind-Field="@context.Direction" />
    <Column @bind-Field="@context.LocationNo" />
    <Column @bind-Field="@context.Remark" />
</Table>


@code{

    private FixtureQuery _query = new();
    public string? QueryTypeString
    {
        get => _query.Type.ToString();
        set => _query.Type = Enum.Parse<FixtureType>(value!);
    }
    private void SubmitQuery(EditContext editContext)
    {
        _renderedFixtures = _fixtures;
        _query = (editContext.Model as FixtureQuery)!;
        if (_query.No != null)
        {
            _renderedFixtures = _renderedFixtures?.Where(item =>
            item.No != null ? item.No.Contains(_query.No) : false);
        }
        if (_query.ProjectNo != null)
        {
            _renderedFixtures = _renderedFixtures?.Where(item =>
            item.ProjectNo != null ? item.ProjectNo.Contains(_query.ProjectNo) : false);
        }
        if (_query.ProjectName != null)
        {
            _renderedFixtures = _renderedFixtures?.Where(item =>
            item?.Project?.Name != null ? item.Project.Name.Contains(_query.ProjectName) : false);
        }
        if (_query.Type != null)
        {
            _renderedFixtures = _renderedFixtures?.Where(item =>
                item.Type == _query.Type);
        }
        _renderedFixtures = _renderedFixtures?.ToList();
    }

    private string _dynamicCode = "items.where(item=>item.";

    private IEnumerable<Fixture>? _renderedFixtures;
    private IEnumerable<Fixture>? _fixtures;

    private int _pageSize = 10;
    public List<Fixture> mockData = Enumerable.Range(1, 100).Select(
        item => new Fixture
        {
            ProjectNo = item.ToString(),
            Type = FixtureType.Vibration,
            Direction = Direction.Left,
            SortId = 1,
            LocationNo = new() { StockNo = 1, Floor = 2 },
            Remark = "New Remark"
        }
    ).ToList();

    protected override void OnInitialized()
    {
        _fixtures = mockData;
        _renderedFixtures = _fixtures;
    }
}